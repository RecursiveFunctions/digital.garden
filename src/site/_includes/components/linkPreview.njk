<!-- Credit for the link preview implementation goes to https://github.com/maximevaillancourt/digital-garden-jekyll-template/blob/master/_includes/link-previews.html -->
<style>
#tooltip-wrapper {
  background: var(--background-primary);
  padding: 1em;
  border-radius: 4px;
  overflow: hidden;
  position: fixed;
  width: 80%;
  max-width: 400px;
  height: auto;
  max-height: 300px;
  font-size: 0.8em;
  box-shadow: 0 5px 10px rgba(0,0,0,0.1);
  opacity: 0;
  transition: opacity 100ms;
  unicode-bidi: plaintext;
  overflow-y: scroll;
  z-index: 9999;
  visibility: hidden;
}

/* Mobile optimization */
@media (max-width: 768px) {
  #tooltip-wrapper {
    width: 90%;
    max-width: 90%;
    left: 5% !important;
    right: 5% !important;
  }
}

#tooltip-wrapper.active {
  opacity: 1;
  visibility: visible;
}

#tooltip-wrapper:after {
  content: "";
  position: absolute;
  z-index: 1;
  bottom: 0;
  left: 0;
  pointer-events: none;
  width: 100%;
  unicode-bidi: plaintext;
  height: 75px;
}

/* Add a subtle highlight to internal links to make them more visible */
.internal-link {
  border-bottom: 1px dashed var(--interactive-accent);
  text-decoration: none;
}

/* Debug panel */
#preview-debug {
  position: fixed;
  bottom: 10px;
  right: 10px;
  background: var(--background-primary);
  border: 1px solid var(--interactive-accent);
  padding: 10px;
  border-radius: 4px;
  font-size: 0.8em;
  z-index: 9999;
}

#preview-debug button {
  background: var(--interactive-accent);
  color: var(--text-on-accent);
  border: none;
  padding: 5px 10px;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 5px;
}
</style>
<div style="opacity: 0; visibility: hidden;" id='tooltip-wrapper'>
  <div id='tooltip-content'>
  </div>
</div>

<iframe style="display: none; height: 0; width: 0;" id='link-preview-iframe' src="">
</iframe>

<div id="preview-debug">
  <p>Link Preview Debug</p>
  <div id="preview-status">Status: Initializing</div>
  <button id="test-preview">Test Preview</button>
  <button id="count-links">Count Links</button>
</div>

<script>
  console.log("Link preview component loaded");
  
  var opacityTimeout;
  var contentTimeout;
  var transitionDurationMs = 100;

  var iframe = document.getElementById('link-preview-iframe')
  var tooltipWrapper = document.getElementById('tooltip-wrapper')
  var tooltipContent = document.getElementById('tooltip-content')

  var linkHistories = {};

  function hideTooltip() {
    opacityTimeout = setTimeout(function () {
      tooltipWrapper.style.opacity = 0;
      tooltipWrapper.classList.remove('active');
      contentTimeout = setTimeout(function () {
        tooltipContent.innerHTML = '';
        tooltipWrapper.style.visibility = 'hidden';
      }, transitionDurationMs + 1);
    }, transitionDurationMs)
  }

  function showTooltip(event) {
    var elem = event.target;
    var elem_props = elem.getClientRects()[elem.getClientRects().length - 1];
    var top = window.pageYOffset || document.documentElement.scrollTop;
    var url = event.target.getAttribute("href");
    if (url.indexOf("http") === -1 || url.indexOf(window.location.host) !== -1) {
      let contentURL = url.split('#')[0]
      if (!linkHistories[contentURL]) {
        iframe.src = contentURL
        iframe.onload = function () {
          try {
            console.log("Loading preview for: " + contentURL);
            tooltipContentHtml = '';
            
            // Safely get the title
            const h1Element = iframe.contentWindow.document.querySelector('h1');
            if (h1Element) {
              tooltipContentHtml += '<div style="font-weight: bold; unicode-bidi: plaintext;">' + h1Element.innerHTML + '</div>';
            } else {
              tooltipContentHtml += '<div style="font-weight: bold; unicode-bidi: plaintext;">Preview</div>';
            }
            
            // Safely get the content
            const contentElement = iframe.contentWindow.document.querySelector('.content');
            if (contentElement) {
              tooltipContentHtml += contentElement.innerHTML;
            } else {
              const bodyElement = iframe.contentWindow.document.querySelector('body');
              if (bodyElement) {
                tooltipContentHtml += '<div>Content preview not available in standard format</div>';
              } else {
                tooltipContentHtml += '<div>Unable to load preview</div>';
              }
            }
            
            tooltipContent.innerHTML = tooltipContentHtml;
            linkHistories[contentURL] = tooltipContentHtml;
            tooltipWrapper.style.visibility = 'visible';
            tooltipWrapper.scrollTop = 0;
            
            setTimeout(function () {
              tooltipWrapper.style.opacity = 1;
              tooltipWrapper.classList.add('active');
              if (url.indexOf("#") != -1) {
                let id = url.split('#')[1];
                const focus = tooltipWrapper.querySelector(`[id='${id}']`);
                if (focus) {
                  focus.classList.add('referred');
                  focus.scrollIntoView({behavior: 'smooth'}, true);
                }
              } else {
                tooltipWrapper.scroll(0, 0);
              }
            }, 1);
          } catch (error) {
            console.error("Error displaying preview:", error);
            tooltipContent.innerHTML = '<div>Error loading preview</div>';
            tooltipWrapper.style.visibility = 'visible';
            tooltipWrapper.style.opacity = 1;
            tooltipWrapper.classList.add('active');
          }
        }
      } else {
        tooltipContent.innerHTML = linkHistories[contentURL]
        tooltipWrapper.style.visibility = 'visible';
        setTimeout(function () {
          tooltipWrapper.style.opacity = 1;
          tooltipWrapper.classList.add('active');
          if (url.indexOf("#") != -1) {
              let id = url.split('#')[1];
              const focus = tooltipWrapper.querySelector(`[id='${id}']`);
              focus.classList.add('referred');
              focus.scrollIntoView({behavior: 'smooth'}, true)
          } else {
              tooltipWrapper.scroll(0, 0);
          }
        }, 1)
      }

      function getInnerWidth(elem) {
        var style = window.getComputedStyle(elem);
        return elem.offsetWidth - parseFloat(style.paddingLeft) - parseFloat(style.paddingRight) - parseFloat(style.borderLeft) - parseFloat(style.borderRight) - parseFloat(style.marginLeft) - parseFloat(style.marginRight);
      }

      tooltipWrapper.style.left = elem_props.left - (tooltipWrapper.offsetWidth / 2) + (elem_props.width / 2) + "px";

      if ((window.innerHeight - elem_props.top) < (tooltipWrapper.offsetHeight)) {
        tooltipWrapper.style.top = elem_props.top + top - tooltipWrapper.offsetHeight - 10 + "px";
      } else if ((window.innerHeight - elem_props.top) > (tooltipWrapper.offsetHeight)) {
        tooltipWrapper.style.top = elem_props.top + top + 35 + "px";
      }

      if ((elem_props.left + (elem_props.width / 2)) < (tooltipWrapper.offsetWidth / 2)) {
        tooltipWrapper.style.left = "10px";
      } else if ((document.body.clientWidth - elem_props.left - (elem_props.width / 2)) < (tooltipWrapper.offsetWidth / 2)) {
        tooltipWrapper.style.left = document.body.clientWidth - tooltipWrapper.offsetWidth - 20 + "px";
      }
    }
  }

  function setupListeners(linkElement) {
    // Remove any existing listeners to prevent duplicates
    linkElement.removeEventListener('mouseleave', hideTooltip);
    linkElement.removeEventListener('mouseenter', showTooltip);
    
    // Add listeners
    linkElement.addEventListener('mouseleave', function (_event) {
      hideTooltip();
    });

    linkElement.addEventListener('mouseenter', function (event) {
      clearTimeout(opacityTimeout);
      clearTimeout(contentTimeout);
      showTooltip(event);
    });
  }

  tooltipWrapper.addEventListener('mouseleave', function (_event) {
    hideTooltip();
  });

  tooltipWrapper.addEventListener('mouseenter', function (event) {
    clearTimeout(opacityTimeout);
    clearTimeout(contentTimeout);
  });

  // Initialize on page load
  window.addEventListener("load", function(event) 
  {
    console.log("Link preview initializing...");
    // Initialize on all internal links
    const internalLinks = document.querySelectorAll('.internal-link');
    const backlinkCards = document.querySelectorAll('.backlink-card a');
    console.log(`Found ${internalLinks.length} internal links and ${backlinkCards.length} backlink cards`);
    
    internalLinks.forEach(setupListeners);
    backlinkCards.forEach(setupListeners);
  });

  // Also set up a mutation observer to catch any dynamically added links
  const observeLinks = () => {
    const observer = new MutationObserver((mutations) => {
      let newLinks = false;
      
      mutations.forEach(mutation => {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
          mutation.addedNodes.forEach(node => {
            // Check if the node itself is a link
            if (node.nodeType === 1 && node.classList && 
                (node.classList.contains('internal-link') || 
                (node.parentNode && node.parentNode.classList && node.parentNode.classList.contains('backlink-card')))) {
              setupListeners(node);
              newLinks = true;
            }
            
            // Check for links within the added node
            if (node.nodeType === 1 && node.querySelectorAll) {
              const links = node.querySelectorAll('.internal-link, .backlink-card a');
              if (links.length > 0) {
                links.forEach(setupListeners);
                newLinks = true;
              }
            }
          });
        }
      });
      
      if (newLinks) {
        console.log("New internal links detected and initialized for preview");
      }
    });

    // Start observing the document body for changes
    observer.observe(document.body, { 
      childList: true, 
      subtree: true 
    });
  };

  // Set up the observer after the DOM is fully loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', observeLinks);
  } else {
    observeLinks();
  }

  // Debug functions
  document.getElementById('test-preview').addEventListener('click', function() {
    const links = document.querySelectorAll('.internal-link');
    if (links.length > 0) {
      document.getElementById('preview-status').textContent = 'Status: Testing preview on first link';
      
      // Create a synthetic mouseover event
      const mouseEvent = new MouseEvent('mouseenter', {
        'view': window,
        'bubbles': true,
        'cancelable': true
      });
      
      links[0].dispatchEvent(mouseEvent);
    } else {
      document.getElementById('preview-status').textContent = 'Status: No internal links found';
    }
  });
  
  document.getElementById('count-links').addEventListener('click', function() {
    const links = document.querySelectorAll('.internal-link');
    document.getElementById('preview-status').textContent = `Status: Found ${links.length} internal links`;
  });
</script>
